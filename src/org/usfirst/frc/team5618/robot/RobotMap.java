// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5618.robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon chassisdrive_fr;
    public static CANTalon chassisdrive_br;
    public static CANTalon chassisdrive_fl;
    public static CANTalon chassisdrive_bl;
    public static RobotDrive chassisdrive;
    public static CANTalon brasmotorBras;
    public static DigitalInput brasLimitBrasHaut;
    public static DigitalInput brasLimitBrasBas;
    public static CANTalon pellemotorPelle;
    public static DigitalInput pelleLimitPelleBallon;
    public static CameraServer server;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        chassisdrive_fr = new CANTalon(4);
        LiveWindow.addActuator("Chassis", "drive_fr", chassisdrive_fr);
        
        chassisdrive_br = new CANTalon(3);
        LiveWindow.addActuator("Chassis", "drive_br", chassisdrive_br);
        
        chassisdrive_fl = new CANTalon(2);
        LiveWindow.addActuator("Chassis", "drive_fl", chassisdrive_fl);
        
        chassisdrive_bl = new CANTalon(5);
        LiveWindow.addActuator("Chassis", "drive_bl", chassisdrive_bl);
        
        chassisdrive = new RobotDrive(chassisdrive_fl, chassisdrive_bl,
              chassisdrive_fr, chassisdrive_br);
        
        chassisdrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        chassisdrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        chassisdrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        chassisdrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        chassisdrive.setSafetyEnabled(true);
        chassisdrive.setExpiration(0.1);
        chassisdrive.setSensitivity(0.5);
        chassisdrive.setMaxOutput(1.0);

        brasmotorBras = new CANTalon(1);
        LiveWindow.addActuator("Bras", "motorBras", brasmotorBras);
        
        brasLimitBrasHaut = new DigitalInput(0);
        LiveWindow.addSensor("Bras", "LimitBrasHaut", brasLimitBrasHaut);
        
        brasLimitBrasBas = new DigitalInput(1);
        LiveWindow.addSensor("Bras", "LimitBrasBas", brasLimitBrasBas);
        
        pellemotorPelle = new CANTalon(6);
        LiveWindow.addActuator("Pelle", "motorPelle", pellemotorPelle);
        
        pelleLimitPelleBallon = new DigitalInput(2);
        LiveWindow.addSensor("Pelle", "LimitPelleBallon", pelleLimitPelleBallon);
        
        server = CameraServer.getInstance();
        server.setQuality(50);
        //the camera name (ex "cam0") can be found through the roborio web interface
        server.startAutomaticCapture("cam0");

    }
}
